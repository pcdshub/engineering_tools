#! /bin/bash
usage()
{
cat << EOF
usage: $0 options

Make a pedestal file for offline use

OPTIONS:
        -r|--run         
               runnumber for pedestal
        -e|--experiment <expname> 
               in case you do not want pedestals for the ongoing experiment
        -O|--opal         
               make pedestals for Opals (default only cspad/EPIX detectors)
        -Z|--zyla         
               make pedestals for Zyla (default only cspad/EPIX detectors)
        -R|--Rayonix
               make pedestals for Rayonix (please note that this is not the correct procedure for this detector)
        -U|--uxi
               make pedestals for Uxi detectors
        -j|--jungfrau3     
               make pedestals for Jungfrau - 3 run version(default only cspad/EPIX detectors)
        -q|--queue <queue>
               queue for batch submisson
        -D|--xtcav_dark
                dark run for XTCAV
        -L|--xtcav_lasingoff
               lasing off run for XTCAV
        -v|--validity_start <val_run>
               validity range (set to <val_run>-end)
        -N|--nevents <#>  
                use this number of events (default 1000). Needed when using -c as original events are counted
        -c|--eventcode <evtcode x> 
                use events with eventcode <x> set
        -n|--noise_max <#> 
                if you have created a noise file, then write pixel mask file for pixels with noise above #sigmas
        -C|--noise_min <#> 
                if noise filecreated, write pixel mask file for pixels with noise below xxx (currently integer only)
        -m|--adu_min <#> 
                write pixel mask file for pixels with pedestal below xxx (currently integer only)
        -x|--adu_max <#>  
                write pixel mask file for pixels with pedestal above xxx )currently integer only)
        -i|--interactive 
                start calibman. -r 0: show all darks, -r n: show runs (n-25) - 25
        -d|--calibdir
                give path for alternative calibdir
        -b|--nbunch
                number of bunches for the laseroff XTCAV calculations
EOF
}

check_running_jobs()
{
    NJOBS=0
    REMJOBIDS=()
    for JOBID in "${JOBIDS[@]}"; do
        if  squeue | grep -q "$JOBID"; then
            REMJOBIDS+=( "$JOBID" )
            NJOBS=$((NJOBS+1))
        fi
    done
    if (( NJOBS == 0 )); then
        echo Nothing running
        JOBIDS=''
    else
        JOBIDS=("${REMJOBIDS[@]}")
        echo "$NJOBS" jobs are still running "${JOBIDS[@]}"
    fi
    return $NJOBS
}

xtcav_dark()
{
   if [[ $RUNLOCAL == 1 ]]; then
       xtcavDark "$EXP" "$RUN"
   else
       tmpScript=$(mktemp -p "$WORKDIR" xtcav_dark_tmpXXXXX.sh)
       chmod u+x "$tmpScript"
       printf '#!/bin/bash\nsource /cds/sw/ds/ana/conda2/manage/bin/psconda.sh\n' > "$tmpScript"
       CMD="xtcavDark $EXP $RUN"
       printf '%s\n' "${CMD}" >> "$tmpScript"
       xtcavCmd="sbatch --exclusive -p $QUEUE -o $WORKDIR/xtcav_${EXP}_Run${RUN}_%J.out $tmpScript"
       echo "run in queue: $xtcavCmd"
       SUBMISSION=$($xtcavCmd)
       echo "$SUBMISSION"
       THISJOBID=$(echo "$SUBMISSION" | awk '{print $4}')
       JOBIDS+=( "$THISJOBID" )
       NJOBS=$((NJOBS+1))

       sleep 10
       echo Running $NJOBS jobs are PIDS: "${JOBIDS[@]}"
       until check_running_jobs; do
           echo 'Checking again in 10s'
           sleep 10
       done
       echo 'All jobs finished'	
   fi
   exit
}

xtcav_lasOff()
{
    #the new XTCAV code does not seem to care about bumber of bunches in the lasing off data.
    #if [[ $NUMBUNCH != 1 ]] ; then
    #	ARG=$ARG' -b '$NUMBUNCH
    #fi

   if [[ $RUNLOCAL == 1 ]]; then
       xtcavLasingOff "$EXP" "$RUN"
   else
       tmpScript=$(mktemp -p "$WORKDIR" xtcav_dark_tmpXXXXX.sh)
       chmod u+x "$tmpScript"
       printf '#!/bin/bash\nsource /cds/sw/ds/ana/conda2/manage/bin/psconda.sh\n' > "$tmpScript"
       CMD="xtcavLasingOff $EXP $RUN"
       printf '%s\n' "${CMD}" >> "$tmpScript"
       xtcavCmd="sbatch --exclusive -p $QUEUE -o $WORKDIR/xtcav_${EXP}_Run${RUN}_%J.out $tmpScript"
       echo "run in queue: $xtcavCmd"
       SUBMISSION=$($xtcavCmd)
       echo "$SUBMISSION"
       THISJOBID=$(echo "$SUBMISSION" | awk '{print $4}')
       JOBIDS+=( "$THISJOBID" )
       NJOBS=$((NJOBS+1))

       sleep 20
       echo Running $NJOBS jobs are PIDS: "${JOBIDS[@]}"
       until check_running_jobs; do
           echo 'Checking again in 10s'
           sleep 10
       done
       echo 'All jobs finished'	
   fi
   exit
}

# Arg: DETECTOR class.  This could be a comma-separated list, but we're 
# matching it in the config file as a string.
get_config()
{
    awk 'BEGIN{n=0;}/'"$1"' \{/{n=1;next;}/\}/{n=0;next;}{if(n)print;}' <"$CFGFILE" >/tmp/script.$$
    source /tmp/script.$$
    rm /tmp/script.$$
    #overwrite if argument is passed
    if [ "$MYNOISESIGMIN" -ne -1 ]; then
	NOISESIGMIN=$MYNOISESIGMIN
    fi
    if [ "$MYNOISESIGMAX" -ne -1 ]; then
	NOISESIGMAX=$MYNOISESIGMAX
    fi
    if [ "$MYADUMIN" -ne -1 ]; then
	ADUMIN=$MYADUMIN
    fi
    if [ "$MYADUMAX" -ne -1 ]; then
	ADUMAX=$MYADUMAX
    fi
}

# Args: Detector ID, Additional command to run.
deploy_geometry()
{
    GEOPATH=$(calibfile path -e "$EXP" -s "$1" -t geometry | awk 'END{print $NF}' -)
    GEODIR=$(dirname "$GEOPATH")
    if [ ! -d "$GEODIR" ]; then
	echo No geometry file found, deploying.
	CMD='geometry_deploy_constants -e '$EXP' -r '$RUN' -d '$1' -D'
        if [[ $HOSTNAME =~ "drp-srcf" ]]; then
            CMD=$CMD' -s :dir=/cds/data/drpsrcf/'$HUTCH'/'$EXP'/xtc/:stream=0-79'
	fi

	echo calling $CMD
	$CMD
	echo Geometry now deployed.
	if [ "$2" != "" ]; then
	    echo Running additional command:
	    echo "$2"
	    $2
	    echo Command complete.
	fi
    fi
}

# Args: Detector ID, Additional command to run.
deploy_gain()
{
    GAINPATH=$(calibfile path -e "$EXP" -s "$1" -t pixel_gain | awk 'END{print $NF}' -)
    GAINDIR=$(dirname "$GAINPATH")
    if [ ! -d "$GAINDIR" ]; then
	echo No gain file file found, deploying.
	CMD='deploy_constants -e '$EXP' -r '$RUN' -d '$1' -C gain -D'
        if [[ $HOSTNAME =~ "drp-srcf" ]]; then
            CMD=$CMD' -s :dir=/cds/data/drpsrcf/'$HUTCH'/'$EXP'/xtc/:stream=0-79'
	fi

	echo calling $CMD
	$CMD
	echo Gain file deployed.
    fi
}


POSITIONAL=()
while [[ $# -gt 0 ]]
do
        key="$1"

	case $key in
		-h|--help)
			usage
			exit
			;;
           	-D|--xtcav_dark)
		        XTCAV=1
			shift
			;;
           	-L|--xtcav_lasingoff)
		        XTCAV=2
			shift
			;;
           	-Z|--zyla)
		        WANT_ZYLA=1
			shift
			;;
           	-O|--opal)
                        WANT_OPAL=1
			shift
			;;
           	-R|--rayonix)
		        WANT_RAYONIX=1
			shift
			;;
           	-U|--uxi)
		        WANT_UXI=1
			shift
			;;
           	-j|--jungfrau3)
		        OLD_JUNGFRAU=1
			shift
			;;
           	-r|--run)
		        RUN="$2"
                        POSITIONAL+=("$1" "$2")
			shift
			shift
			;;
           	-e|--experiment)
		        EXP="$2"
                        POSITIONAL+=("$1" "$2")
			shift
			shift
			;;
           	-l|--local)
		        RUNLOCAL=1
			shift
			;;
           	-N|--nevents)
		        NUMEVT=("$2")
			shift
			shift
			;;
                -q|--queue)
		        QUEUE=("$2")
			shift
			shift
			;;
                -i|--interactive)
		        INTERACTIVE=1
			shift
			;;
                -c|--eventcode)
		        CALIBCODE=("$2")
			shift
			shift
			;;
                -v|--validity_start)
		        VALSTR=("$2")
			shift
			shift
			;;
                -d|--calibdir)
		        CALIBDIR=("$2")
			shift
			shift
			;;
           	-t|--test)
		        DEPLOY=0
			shift
			;;
                -n|--noise_max)
		        MYNOISESIGMAX=("$2")
			shift
			shift
			;;
                -C|--noise_min)
		        MYNOISESIGMIN=("$2")
			shift
			shift
			;;
                -m|--adu_min)
		        MYADUMIN=("$2")
			shift
			shift
			;;
                -x|--adu_max)
		        MYADUMAX=("$2")
			shift
			shift
			;;
                -b|--nbunch)
		        NUMBUNCH=("$2")
			shift
			shift
			;;
                 *)
                        POSITIONAL+=("$1")
			shift
			;;
	esac
done
set -- "${POSITIONAL[@]}"


T="$(date +%s%N)"
echo "XXXXXXXXXXXXXXXXX START MAKEPEDS DEV at $(date +'%T') on $HOSTNAME XXXXXXXXXXXXXXXXXXXXXXXXXXXX"

RUN=${RUN:=0}
EXP=${EXP:='xxx'}
QUEUE=${QUEUE:='xxx'}
NUMEVT=${NUMEVT:=1000}
XTCAV=${XTCAV:=0}
INTERACTIVE=${INTERACTIVE:=0}
CALIBCODE=${CALIBCODE:=0}
VALSTR=${VALSTR:='xxx'}
CALIBDIR=${CALIBDIR:='xxx'}
DEPLOY=${DEPLOY:=1}
MYNOISESIGMIN=${MYNOISESIGMIN:=-1}
MYNOISESIGMAX=${MYNOISESIGMAX:=-1}
MYADUMIN=${MYADUMIN:=-1}
MYADUMAX=${MYADUMAX:=-1}
NUMBUNCH=${NUMBUNCH:=1}

if [ $RUN == 0 ]; then
    if [ $INTERACTIVE -ne 1 ]; then
	printf "Please enter a run number HERE: \n"; read -r RUN
    fi
fi

if [ $EXP == 'xxx' ]; then
    echo 'no experiment passed!!!'
    HUTCH=$(/reg/g/pcds/engineering_tools/latest-released/scripts/get_info --gethutch)
    echo HUTCH "$HUTCH"
    if [[ "$HUTCH" != 'unknown_hutch' ]]; then
        EXP=$(/reg/g/pcds/engineering_tools/latest-released/scripts/get_info --exp --hutch "$HUTCH")
    fi
else
    HUTCH=${EXP:0:3}
fi

CFGFILE=/reg/g/pcds/pyps/config/$HUTCH/makepeds.cfg

if [[ $EXP == 'xxx' ]]; then
    printf "Please enter an experiment name HERE: \n"; read -r EXP
fi

# set the umask so all the files create are group writeable
#umask 002
LCLS2_HUTCHES="rix, tmo, ued"
if echo "$LCLS2_HUTCHES" | grep -iw "$HUTCH" > /dev/null; then
    echo "This is a LCLS-II experiment"
    source /cds/sw/ds/ana/conda2/manage/bin/psconda.sh
    LCLS2=1
else
    #echo "This is a LCLS-I experiment"
    source /reg/g/psdm/etc/psconda.sh 
fi

#if you don't pass the queue, it'll run interactively 
if [[ $QUEUE == 'xxx' ]]; then
    RUNLOCAL=1
fi

#(hopefully) effectively turn off relative cuts for status bits. Defaults to 6. used in calibrun
ARG=' -n '$NUMEVT' -Z 1000000 -U 1000000 -z 1000000 -u 1000000 '

###########
# setup work directory - always!
###########
if [ $CALIBDIR != 'xxx' ]; then
    ARG=$ARG' -c '$CALIBDIR
    JFARG=' -C '$CALIBDIR
else
    JFARG=''
    CALIBDIR=/reg/d/psdm/${HUTCH}/$EXP/calib/
    if [[ $HOSTNAME =~ "drp-srcf" ]]; then
        CALIBDIR=/cds/data/drpsrcf/${HUTCH}/$EXP/calib/
    fi
    if [[ $LCLS2 -gt 0 ]]; then
	CALIBDIR=${CALIBDIR/calib/scratch}
    fi
fi
WORKDIR=$CALIBDIR/pedestal_workdir
if [ ! -d "$WORKDIR" ]; then
    if [ -d "$CALIBDIR" ]; then
	mkdir -p "$WORKDIR"
	if [ ! -d "$WORKDIR" ]; then
	    #inexp=$(groups | grep -c $EXP)
	    #inhutch=$(groups | grep -c ps-$HUTCH)
	    #if [[ ( $inexp -gt 0 ) ||  ( $inhutch -gt 1 )]]; then
	    echo 'Cannot create typical directory to store calib logfiles & results is not writeable, will attempt to work from /tmp, but things may fail'
            WORKDIR='/tmp'
	fi
	#else
	#    echo 'not member of experiment '$EXP' of ps-'$HUTCH' group, QUIT!'
	#fi
    else
	echo "experiments directory $DIR does not exist, quit"
	exit
    fi
fi
if [ ! -w "$WORKDIR" ]; then
    echo 'Typical directory to store calib logfiles & results is not writeable, will attempt to work from /tmp, but things may fail'
    WORKDIR='/tmp'
fi 
cd "$WORKDIR"

######################
# work on the XTCAV
######################

if [ $XTCAV == 1 ]; then
    xtcav_dark
fi
if [ $XTCAV == 2 ]; then
    xtcav_lasOff
fi
######################
# endXTCAV - both functions will call exit!
######################

###########
# few generic parameters
###########
if [ $INTERACTIVE == 1 ]; then
    echo 'now calling calibman (GUI) - switch to old release for now'
    source /reg/g/psdm/etc/psconda.sh.old
    calibman
    exit
fi

if [ $CALIBCODE -ne 0 ]; then
    if [ $NUMEVT -le 1000 ]; then
	NUMEVT=1000000
    fi
    ARG=$ARG' -f '$CALIBCODE
fi

###
# calibrun can't submit to SLURM quite yet
###
#if [ $RUNLOCAL -ne 1 ]; then
#    ARG=$ARG' -q '$QUEUE
#fi

if [ $DEPLOY == 1 ]; then
    ARG=$ARG' -D '
fi


CREATE_TIME=$(date '+%m_%d_%Y_%H:%M:%S')
printf -v RUNSTR "%04g" "$RUN"

if [[ $HOSTNAME =~ "drp-srcf" ]]; then
    echo check FFB files: 
    ls -ltr /cds/data/drpsrcf/"$HUTCH"/"$EXP"/xtc/*r"$RUNSTR"*s*xtc*
    if [[ $LCLS2 -gt 0 ]]; then
        detnames -r exp="${EXP}",run="${RUN}",dir=/cds/data/drpsrcf/"$HUTCH"/"$EXP"/xtc > /tmp/detnames_"$EXP"_"$CREATE_TIME"
    else
        detnames exp="${EXP}":run="${RUN}":dir=/cds/data/drpsrcf/"$HUTCH"/"$EXP"/xtc:stream=0-79 > /tmp/detnames_"$EXP"_"$CREATE_TIME"
    fi
else
    echo Process offline files: 
    ls -ltr /reg/d/psdm/"$HUTCH"/"$EXP"/xtc/*r*"$RUNSTR"*s*xtc*
    if [[ "$LCLS2" -gt 0 ]]; then
        detnames -r exp="${EXP}",run="${RUN}" > /tmp/detnames_"$EXP"_"$CREATE_TIME"
    else
        detnames exp="${EXP}":run="${RUN}":stream=0-79 > /tmp/detnames_"$EXP"_"$CREATE_TIME"
    fi
fi
#running local
echo "-----------------------"
echo 'XTC files contain:'
cat /tmp/detnames_"$EXP"_"$CREATE_TIME"
echo "-----------------------"

#### 
# Section for LCLS2 detectors.
####
if [[ $LCLS2 -gt 0 ]]; then
    ####
    # epix100 in LCLS2 related stuff. 
    ####
    #check if epix100 detectors are present
    HAVE_EPIX100=$(grep -c epix100 /tmp/detnames_"$EXP"_"$CREATE_TIME")
    if [[ $HAVE_EPIX100 -ge 1 ]]; then
        DETNAMES=$(grep epix100 /tmp/detnames_"$EXP"_"$CREATE_TIME" | grep raw | awk  'BEGIN { FS = "|"}; {print $1}' | paste -d " " -s)
        DETTYPES=$(grep epix100 /tmp/detnames_"$EXP"_"$CREATE_TIME" | grep raw | awk  'BEGIN { FS = "|"}; {print $2}' | paste -d " " -s)
        for i in "${!DETNAMES[@]}"; do
	    LOCARG='' #optional cuts, I suspect this will not be developed for LV17.
	    MYDET=${DETNAMES[i]}
	    MYDETTYPE=${DETTYPES[i]}
	    echo "$MYDETTYPE" "$MYDET"
	    if [ "$MYDETTYPE" = 'epix100' ]; then
                echo 'now calibrate...'
                cmd="det_dark_proc -r $RUN -d $MYDET -D -e $EXP $LOCARG"
        	echo "$cmd"
    	        #$cmd
            fi
        done
    fi
    ####
    # epixquad for UED
    ####
    HAVE_EPIX10K=$(grep -c epix10ka /tmp/detnames_"$EXP"_"$CREATE_TIME")
    if [[ $HAVE_EPIX10K -ge 1 ]]; then
        DETNAMES=$(grep epix10ka /tmp/detnames_"$EXP"_"$CREATE_TIME" | grep raw | awk  'BEGIN { FS = "|"}; {print $1}' | paste -d " " -s)
        DETTYPES=$(grep epix10ka /tmp/detnames_"$EXP"_"$CREATE_TIME" | grep raw | awk  'BEGIN { FS = "|"}; {print $2}' | paste -d " " -s)
        for i in "${!DETNAMES[@]}"; do
	    LOCARG='' #optional cuts, I suspect this will not be developed for LV17.
	    EPIX10K="${DETNAMES[i]// /}"
	    MYDETTYPE=${DETTYPES[i]}
	    if [ "$MYDETTYPE" = 'epix10ka' ]; then
                echo "Epix10ka name for $EXP is: $EPIX10K"
                ##run all at once - do not use
      	        #Do not use workdir as you'd need to run the full charge injection run there for this to work
	        #revisit when we run into permission problems.
    	        for calibcycle in {0..4}; do
                    nextcycle=$(( calibcycle + 1 ))
		    CMD="epix10ka_pedestals_calibration -d $EPIX10K -e $EXP -r $RUN --stepnum $calibcycle --stepmax $nextcycle -L INFO"
		    if [[ $HOSTNAME =~ "drp-srcf" ]]; then
   		        CMD=$CMD' -x /cds/data/drpsrcf/'$HUTCH'/'$EXP'/xtc'
                    fi
    	            echo "---------------EPIX10K PEDESTALS FOR CYCLE $calibcycle --------------------"
                    if [[ $RUNLOCAL != 1 ]]; then
                        tmpScript=$(mktemp -p $WORKDIR epix10ka_pedestals_tmpXXXXX.sh)
                        #trap "rm -f $tmpScript" EXIT
                        chmod u+x "$tmpScript"
                        printf '#!/bin/bash\nsource /cds/sw/ds/ana/conda2/manage/bin/psconda.sh\n' > "$tmpScript"
                        printf '%s\n' "${CMD}" >> "$tmpScript"
                        ep10kaCmd="sbatch --exclusive -p $QUEUE -o $WORKDIR/${EPIX10K}_${EXP}_Run${RUN}_cycle${calibcycle}_%J.out $tmpScript"
                        echo "run in queue: $ep10kaCmd"
                        SUBMISSION=$($ep10kaCmd)
                        echo "$SUBMISSION"
                        THISJOBID=$(echo "$SUBMISSION" | awk '{print $4}')
                        JOBIDS+=( "$THISJOBID" )
                        NJOBS=$((NJOBS+1))
                    else            
                        echo "$cmd"
                        $CMD
                    fi
                done
	        ALLJOBIDS=("${JOBIDS[@]}")
            fi
   	    NFAILEDJOBS=0
            if [[ $RUNLOCAL != 1 ]]; then
	        echo 'Wait for 1 minute before checking jobs:'
                sleep 60
                echo Running "$NJOBS" jobs are PIDS: "${JOBIDS[@]}"
                until check_running_jobs; do
                    echo 'Checking again in 10s'
                    sleep 10
                done
                echo 'All jobs finished'
                # and now check that none of the jobs have existed with an error code:
                # currently, the epix10k jobs print DONE at the end. 
                # Second check necessary as jobs can fail without printing an exit code to the logfile
	        for JOBID in "${ALLJOBIDS[@]}"; do
	            echo "Checking job $JOBID"
	            if grep -q 'exit code' "$WORKDIR"/*"$JOBID".out; then
		        NFAILEDJOBS=$((NFAILEDJOBS+1))
	            elif ! grep -q 'DONE' "$WORKDIR"/*"$JOBID".out; then
		        NFAILEDJOBS=$((NFAILEDJOBS+1))
	            fi
	        done
	
            fi

            echo "---------------EPIX10K PEDESTALS CALCULATED NOW DEPLOY     --------------------"
            if [ $DEPLOY == 1 ]; then
	        if [ $NFAILEDJOBS -gt 0 ]; then
	            read -r -p "$NFAILEDJOBS of the calibration tasks failed, do you want to continue anyways (y/n)?"
	            if [ "$REPLY" != "y" ];then
		        exit 1
	            fi
	        fi

                for EPIX10K in $DETNAMES; do
                    CMD="epix10ka_deploy_constants -D -d $EPIX10K -e $EXP -r $RUN -L INFO"
		    if [[ $HOSTNAME =~ "drp-srcf" ]]; then
   		        CMD=$CMD' -x /cds/data/drpsrcf/'$HUTCH'/'$EXP'/xtc'
                    fi
	            echo 'setting validity....' $VALSTR
                    if [ $VALSTR != 'xxx' ]; then
                        CMD=$CMD' -t '$VALSTR
                    fi
                    echo "$cmd"
                    $CMD
                done
                if [[ $RUNLOCAL != 1 ]]; then
    	            echo 'Print Information about batch jobs'
	            JOBIDSTR=''
    	            for JOBID in "${ALLJOBIDS[@]}"; do
		        if [[ $JOBIDSTR != '' ]]; then 
 		            JOBIDSTR=$JOBIDSTR','
		        fi
		        JOBIDSTR=$JOBIDSTR$JOBID
	            done
	            sacct -j "$JOBIDSTR" --format=JobID,AveCPU,AveVMSize,CPUTime,Start,End,Elapsed
                fi
            fi
        done
        echo "-------------------- STOP EPIX10K PEDESTALS at $(date +'%T') ----------------------------"
    fi

    rm /tmp/detnames_"$EXP"_"$CREATE_TIME"
    T2="$(($(date +%s%N)-T))"
    S="$((T2/1000000000))"
    M="$((T2/1000000))"
    echo "xxxxxxxxxxxxxxxxx END LCLS2 MAKEPEDS at $(date +'%T') after  $S.$M XXXXXXXXXXXXXXXXXXXXXXX"
    exit
fi



####
# Jungfrau related stuff. Different executable w/ different options. Ack.
###
#check if jungfrau detectors are present
HAVE_JUNGFRAU=$(grep -c Jungfrau /tmp/detnames_"$EXP"_"$CREATE_TIME")
#HAVE_JUNGFRAU=$(detnames exp=${EXP}:run=${RUN} | grep Jungfrau | wc -l)
if [[ ( $HAVE_JUNGFRAU -ge 1 ) && ( $WANT_ZYLA -eq 0 ) && ( $WANT_OPAL -eq 0 ) && ( $WANT_RAYONIX -eq 0 )  && ( $WANT_UXI -eq 0 ) ]]; then
    
    DETNAMES=$(grep Jungfrau /tmp/detnames_"$EXP"_"$CREATE_TIME" | awk  'BEGIN { FS = "|"}; {print $1}' | paste -d " " -s)

    DSNAME='exp='$EXP':run='$RUN':smd:stream=0-79'
    if [ -v OLD_JUNGFRAU ]; then
	#get the dataset name
	(( RUN1=RUN+1 ))
	(( RUN2=RUN+2 ))
	DSNAME="exp=$EXP:run=$RUN,$RUN1,$RUN2:smd:stream=0-79"
    fi
    if [[ $HOSTNAME =~ "drp-srcf" ]]; then
	DSNAME=$DSNAME':dir=/cds/data/drpsrcf/'$HUTCH'/'$EXP'/xtc/'
    fi   

    #default arguments.
    JFARG=$JFARG' -d '$DSNAME
    if [ $CALIBCODE -ne 0 ]; then
        JFARG=$JFARG' -c '$CALIBCODE' --evstep '$NUMEVT
    fi
    JFARG=$JFARG' --events '$NUMEVT
    if [[ $DEPLOY == 1 ]]; then
        JFARG=$JFARG' --upload '
    fi

    #specify parameters for status bits in pixel mask
    get_config "Jungfrau"

    JFARG=$JFARG' --int_lo='$ADUMIN' --int_hi='$ADUMAX' --rms_lo='$NOISESIGMIN' --rms_hi='$NOISESIGMAX

    echo "-------------------- START JUNGFRAU PEDESTALS at $(date +'%T') ----------------------------"

    if [[ $RUNLOCAL != 1 ]]; then
        JOBIDS=()
        NJOBS=0
    fi
 
    for JUNGFRAU in $DETNAMES; do
	echo "jungfrau loop $JUNGFRAU  -- $RUNLOCAL"
        CMD="jungfrau_dark_proc $JFARG -s $JUNGFRAU"
        #now finally call the command
   	for calibcycle in {0..2}; do
            if [ -v OLD_JUNGFRAU ]; then
                CMDC=$CMD
            elif  [ $CALIBCODE -eq 0 ]; then
                CMDC=$CMD' --stepnum '$calibcycle
	    else
                CMDC=$CMD
	    fi
            if [[ $RUNLOCAL != 1 ]]; then
                tmpScript=$(mktemp -p $WORKDIR jungfrau_multi_tmpXXXXX.sh)
                #trap "rm -f $tmpScript" EXIT
                chmod u+x "$tmpScript"
                printf '#!/bin/bash\nsource /cds/sw/ds/ana/conda1/manage/bin/psconda.sh\n' > "$tmpScript"
                printf '%s\n' "${CMDC}" >> "$tmpScript"
                jfCmd="sbatch --exclusive -p $QUEUE -o $WORKDIR/jungfrau_${EXP}_RUN${RUN}_%J.out $tmpScript"
                echo "run in queue: $jfCmd"
                SUBMISSION=$($jfCmd)
                echo "$SUBMISSION"
                THISJOBID=$(echo "$SUBMISSION" | awk '{print $4}')
                JOBIDS+=( "$THISJOBID" )
                NJOBS=$((NJOBS+1))
	    else
                echo "$CMDC"
                $CMDC
            fi
            if [ -v OLD_JUNGFRAU ]; then
       	        break
	    fi
            if [ $CALIBCODE -ne 0 ]; then
		break
	    fi
        done
	ALLJOBIDS=("${JOBIDS[@]}")
    done

    NFAILEDJOBS=0
    if [[ $RUNLOCAL != 1 ]]; then
	echo 'Wait for 1/2 minutes before checking jobs:'
        sleep 30
	echo Running $NJOBS jobs are PIDS: "${JOBIDS[@]}"
        until check_running_jobs; do
                echo 'Checking again in 10s'
                sleep 10
            done
        echo 'All jobs finished'
	# and now check that none of the jobs have existed with an error code:
	for JOBID in "${ALLJOBIDS[@]}"; do
	    echo "Checking job $JOBID"
	    if grep -q 'exit code' "$WORKDIR"/*"$JOBID".out; then
		NFAILEDJOBS=$((NFAILEDJOBS+1))
	    fi
	done
    fi

    #Now deploy.
    if [ $DEPLOY == 1 ]; then
	if [ $NFAILEDJOBS -gt 0 ]; then
	    read -r -p "$NFAILEDJOBS of the calibration tasks failed, do you want to quit here (y/n)"
	    if [ "$REPLY" != "y" ];then
		exit 1
	    fi
	fi
        for JUNGFRAU in $DETNAMES; do
	    #this is also where -t should be used, just as for the validity range
            CMD="jungfrau_deploy_constants -D -d $JUNGFRAU -e $EXP -r $RUN"
            if [ $VALSTR != 'xxx' ]; then
	       # this does not work before ana-.....	
               #CMD=$CMD' -t '$VALSTR'-end'
               CMD=$CMD' -t '$VALSTR
            fi
            if [[ $HOSTNAME =~ "drp-srcf" ]]; then
	        CMD=$CMD' -x /cds/data/drpsrcf/'$HUTCH'/'$EXP'/xtc/'
            fi   

            echo "$cmd"
            $CMD
        done
    fi

    for JUNGFRAU in $DETNAMES; do
        deploy_geometry "$JUNGFRAU" "jungfrau_gain_constants -d exp=${EXP}:run=${RUN} -D"
    done

    ls -l /reg/d/psdm/"${EXP:0:3}"/"$EXP"/calib/J*/*/pedestals/*"$RUN"*data
    echo "-------------------- END JUNGFRAU PEDESTALS at $(date +'%T') ----------------------------"
fi

####
# epix10k related stuff. Different executable w/ different options. Ack.
###
#check if epix10k detectors are present
HAVE_EPIX10K=$(grep -c Epix10ka /tmp/detnames_"$EXP"_"$CREATE_TIME")
if [[ ( $HAVE_EPIX10K -ge 1 ) && ( $WANT_ZYLA -eq 0 ) && ( $WANT_OPAL -eq 0 ) && ( $WANT_RAYONIX -eq 0 ) && ( $WANT_UXI -eq 0 ) ]]; then
    echo "-------------------- START EPIX10K PEDESTALS at $(date +'%T') ----------------------------"
    DETNAMES=$(grep Epix10ka /tmp/detnames_"$EXP"_"$CREATE_TIME" | awk  'BEGIN { FS = "|"}; {print $2}' | paste -d " " -s)
    if [[ $RUNLOCAL -ne 1 ]]; then
        JOBIDS=()
        NJOBS=0
    fi
    
    for EPIX10K in $DETNAMES; do
        echo "Epix10ka name for $EXP is: $EPIX10K"
        ##run all at once - do not use
	#Do not use workdir as you'd need to run the full charge injection run there for this to work
	#revisit when we run into permission problems.

	for calibcycle in {0..4}; do
            if [[ $HOSTNAME =~ "drp-srcf" ]]; then
		CMD="epix10ka_pedestals_calibration -d $EPIX10K -e $EXP -r $RUN -c $calibcycle -x /cds/data/drpsrcf/$HUTCH/$EXP/xtc/:live:stream=0-79 -L INFO"
	    else 
		CMD="epix10ka_pedestals_calibration -d $EPIX10K -e $EXP -r $RUN -c $calibcycle -L INFO"
	    fi
   	    echo "---------------EPIX10K PEDESTALS FOR CYCLE $calibcycle --------------------"
            if [[ $RUNLOCAL != 1 ]]; then
                tmpScript=$(mktemp -p $WORKDIR epix10ka_pedestals_tmpXXXXX.sh)
                #trap "rm -f $tmpScript" EXIT
                chmod u+x "$tmpScript"
                printf '#!/bin/bash\nsource /cds/sw/ds/ana/conda1/manage/bin/psconda.sh\n' > "$tmpScript"
                printf '%s\n' "${CMD}" >> "$tmpScript"
                ep10kaCmd="sbatch --exclusive -p $QUEUE -o $WORKDIR/${EPIX10K}_${EXP}_Run${RUN}_cycle${calibcycle}_%J.out $tmpScript"
                echo "run in queue: $ep10kaCmd"
                SUBMISSION=$($ep10kaCmd)
                echo "$SUBMISSION"
                THISJOBID=$(echo "$SUBMISSION" | awk '{print $4}')
                JOBIDS+=( "$THISJOBID" )
                NJOBS=$((NJOBS+1))
            else            
                echo "$CMD"
                $CMD
            fi
        done
	ALLJOBIDS=("${JOBIDS[@]}")
    done
    if [[ $RUNLOCAL != 1 ]]; then
	echo 'Wait for 1 minute before checking jobs:'
        sleep 60
	echo Running $NJOBS jobs are PIDS: "${JOBIDS[@]}"
        until check_running_jobs; do
                echo 'Checking again in 10s'
                sleep 10
            done
        echo 'All jobs finished'
        # and now check that none of the jobs have existed with an error code:
        # currently, the epix10k jobs print DONE at the end. 
# Second check necessary as jobs can fail without printing an exit code to the logfile
	NFAILEDJOBS=0
	for JOBID in "${ALLJOBIDS[@]}"; do
	    echo "Checking job $JOBID"
	    if grep -q 'exit code' "$WORKDIR"/*"$JOBID".out; then
		NFAILEDJOBS=$((NFAILEDJOBS+1))
	    elif ! grep -q 'DONE' "$WORKDIR"/*"$JOBID".out; then
		NFAILEDJOBS=$((NFAILEDJOBS+1))
	    fi
	done
	
    fi

    echo "---------------EPIX10K PEDESTALS CALCULATED NOW DEPLOY     --------------------"
    if [ $DEPLOY == 1 ]; then
	if [ $NFAILEDJOBS -gt 0 ]; then
	    read -r -p "$NFAILEDJOBS of the calibration tasks failed, do you want to continue anyways (y/n)?"
	    if [ "$REPLY" != "y" ];then
		exit 1
	    fi
	fi

        for EPIX10K in $DETNAMES; do
            CMD="epix10ka_deploy_constants -D -d $EPIX10K -e $EXP -r $RUN -L INFO"
	    echo 'setting validity....' $VALSTR
            if [ $VALSTR != 'xxx' ]; then
                CMD=$CMD' -t '$VALSTR
            fi
            if [[ $HOSTNAME =~ "drp-srcf" ]]; then
                CMD=$CMD' -x /cds/data/drpsrcf/'$HUTCH'/'$EXP'/xtc/:stream=0-79'
	    fi
            echo "$CMD"
            $CMD
        done
        if [[ $RUNLOCAL != 1 ]]; then
    	    echo 'Print Information about batch jobs'
	    JOBIDSTR=''
    	    for JOBID in "${ALLJOBIDS[@]}"; do
		if [[ $JOBIDSTR != '' ]]; then 
 		    JOBIDSTR=$JOBIDSTR','
		fi
		JOBIDSTR=$JOBIDSTR$JOBID
	    done
	    sacct -j "$JOBIDSTR" --format=JobID,AveCPU,AveVMSize,CPUTime,Start,End,Elapsed
        fi
    fi

    for EPIX10K in $DETNAMES; do
	    deploy_geometry "$EPIX10K"
    done
    echo "-------------------- END EPIX10K PEDESTALS at $(date +'%T') ----------------------------"
fi

###########
# Make list of detectors to treat with calibrun
###########

#check if detectors are present    
HAVE_EPIX=$(grep -c Epix100 /tmp/detnames_"$EXP"_"$CREATE_TIME")
HAVE_CSPAD=$(grep -c Cspad /tmp/detnames_"$EXP"_"$CREATE_TIME")
HAVE_ZYLA=$(grep -c Zyla /tmp/detnames_"$EXP"_"$CREATE_TIME")
HAVE_UXI=$(grep -c -i Uxi /tmp/detnames_"$EXP"_"$CREATE_TIME")
HAVE_ISTAR=$(grep -c iStar /tmp/detnames_"$EXP"_"$CREATE_TIME")
HAVE_OPAL=$(grep -c Opal /tmp/detnames_"$EXP"_"$CREATE_TIME")
HAVE_RAYONIX=$(grep -c Rayonix /tmp/detnames_"$EXP"_"$CREATE_TIME")

#not like this: calculation
(( SPECIFIED_CUTS=MYNOISESIGMIN+MYNOISESIGMAX+MYADUMIN+MYADUMAX ))

DETS=''
#always make pedestals if detectors are present in data
if [[ ( $HAVE_CSPAD -ge 1) ]]; then
    DETS="$DETS CSPAD,CSPAD2x2"

    DETNAMES=$(grep Cspad /tmp/detnames_"$EXP"_"$CREATE_TIME" | awk  'BEGIN { FS = "|"}; {print $1}' | paste -d " " -s)
    for CSPAD in $DETNAMES; do
	deploy_geometry "$CSPAD"
    done
fi

if [[ ( $HAVE_EPIX -ge 1) ]]; then
    DETS="$DETS Epix100a"

    DETNAMES=$(grep Epix100a /tmp/detnames_"$EXP"_"$CREATE_TIME" | awk  'BEGIN { FS = "|"}; {print $1}' | paste -d " " -s)
    for EPIX100 in $DETNAMES; do
	deploy_gain "$EPIX100"
    done
fi

#add Zyla only on request
if [[ ( $HAVE_ZYLA -ge 1 ) && ( $WANT_ZYLA -ge 1 ) ]]; then
    if [ $SPECIFIED_CUTS -eq -4 ]; then
	DETS="$DETS Zyla"
    else
	DETS='Zyla'
    fi
fi
#add iStar only on request
if [[ ( $HAVE_ISTAR -ge 1 ) && ( $WANT_ZYLA -ge 1 ) ]]; then
    if [ $SPECIFIED_CUTS -eq -4 ]; then
	DETS="$DETS iStar"
    else
	DETS='iStar'
    fi
fi

#add Opal only on request
if [[ ( $HAVE_OPAL -ge 1 ) && ( $WANT_OPAL -ge 1 ) ]]; then
    if [ $SPECIFIED_CUTS -eq -4 ]; then
	DETS="$DETS Opal1000,Opal2000,Opal4000,Opal8000"
    else
	DETS='Opal1000,Opal2000,Opal4000,Opal8000'
    fi
fi

#add uxi only on request
if [[ ( $HAVE_UXI -ge 1 ) && ( $WANT_UXI -ge 1 ) ]]; then
    if [ $SPECIFIED_CUTS -eq -4 ]; then
	DETS="$DETS uxi"
    else
	DETS='uxi'
    fi
fi

#add Rayonix only on request
if [[ ( $HAVE_RAYONIX -ge 1 ) && ( $WANT_RAYONIX -ge 1 ) ]]; then
    if [ $SPECIFIED_CUTS -eq -4 ]; then
	DETS="$DETS Rayonix"
    else
	DETS='Rayonix'	
    fi
    ARG=$ARG' --zeropeds'
    
    DETNAMES=$(grep Rayonix /tmp/detnames_"$EXP"_"$CREATE_TIME" | awk  'BEGIN { FS = "|"}; {print $1}' | paste -d " " -s)
    for RAYONIX in $DETNAMES; do
	deploy_geometry "$RAYONIX"
    done
fi

if [[ ( $DETS == '' ) ]]; then
    T2="$(($(date +%s%N)-T))"
    S="$((T2/1000000000))"
    MIN="$((S/60))"
    SEC="$((S-MIN*60))"
    echo "XXXX NO epix100/cspad/opal/... IN RUN $RUN - END MAKEPEDS at $(date +'%T') after  $MIN.$SEC XXXXXXXXXXXXXXXXX"
    exit
fi

echo "now calling calibrun from host $HOSTNAME from directory "
echo "in: $(pwd) running: $(which calibrun) on $(hostname)"
echo "for the following detectors: $DETS"

for MYDET in $DETS; do
    #set thresholds for the detector in question
    #ADU minimum, maximum
    get_config $MYDET

    LOCARG=$ARG' --thr_int_min '$ADUMIN' --thr_int_max '$ADUMAX' --thr_rms_min '$NOISESIGMIN' --thr_rms '$NOISESIGMAX
    #this was likely to work with runs where the zyla rate was < readout rate....
    if [[ ( $MYDET == 'Zyla') ]]; then
	LOCARG=$LOCARG' -m 100'
    fi

    if [ $VALSTR != 'xxx' ]; then
        LOCARG=$LOCARG' -v '$VALSTR'-end'
    fi

    echo "-------------------- START CALIBRUN at $(date +'%T') for detector $MYDET----------------------------"
    source /reg/g/psdm/etc/psconda.sh
    if [[ $HOSTNAME =~ "drp-srcf" ]]; then
    	cmd="calibrun -r $RUN  -d $MYDET -P -e $EXP -x /cds/data/drpsrcf/$HUTCH/$EXP/xtc/ $LOCARG"
    	echo "$cmd"
    	$cmd
    else
    	cmd="calibrun -r $RUN  -d $MYDET -P -e $EXP -m 10 $LOCARG"
    	echo "$cmd"
    	$cmd
    fi
    echo "-------------------- END CALIBRUN at $(date +'%T') for detector $MYDET----------------------------"
done
rm /tmp/detnames_"$EXP"_"$CREATE_TIME"
T2="$(($(date +%s%N)-T))"
S="$((T2/1000000000))"
M="$((T2/1000000))"
echo "xxxxxxxxxxxxxxxxxxxx END MAKEPEDS at $(date +'%T') after  $S.$M XXXXXXXXXXXXXXXXXXXXXXXXXXXX"
