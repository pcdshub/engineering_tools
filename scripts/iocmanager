#!/bin/bash

# Define usage here for faster return
usage()
{
cat << EOF
usage: iocmanager [hutch]

Control status of all IOCs running in a particular hutch in an interactive GUI.
Current hutch is used if not provided.
EOF
}
if [[ ($1 == "--help") || ($1 == "-h") ]]; then
	usage
	exit 0
fi

# Check hutch
DIR=$(readlink -f "$(dirname "${BASH_SOURCE[0]}")")
PATH=$DIR:$PATH
HUTCH=${1:-$(get_hutch_name)}

# Exit if hutch is still unknown
# TODO: Replace with check for actual hutch names
if [[ "$HUTCH" == "unknown_hutch" ]]; then
    echo "Unknown hutch, please specify e.g. 'iocmanager xrt'" >&2
    exit 1
fi

# Setup environment
if [ -x /etc/pathinit ]; then
    source /etc/pathinit
else
    export PSPKG_ROOT=/reg/g/pcds/pkg_mgr
    export PYPS_ROOT=/reg/g/pcds/pyps
    export IOC_ROOT=/reg/g/pcds/epics/ioc
    export CAMRECORD_ROOT=/reg/g/pcds/controls/camrecord
    export IOC_DATA=/reg/d/iocData
    export IOC_COMMON=/reg/d/iocCommon
fi
PSPKG_OS=$(${PSPKG_ROOT}/etc/pspkg_os.sh)
export PSPKG_OS
if [ "$PSPKG_OS" == rhel5 ]; then
    echo "IocManager 2.0.0 and higher does not run on RHEL5!"
    exit 1
fi
export QT_XKB_CONFIG_ROOT=/usr/share/X11/xkb
export PSPKG_RELEASE=controls-0.1.9
source $PSPKG_ROOT/etc/set_env.sh
ulimit -c unlimited

/reg/g/pcds/pyps/config/"${HUTCH,,}"/iocmanager/IocManager.py --hutch "${HUTCH,,}" > /dev/null &

# Do some window cleanup for xpp
if [ "$(whoami)" == "xppopr" ]; then
    window_id=$(xdotool search --sync --onlyvisible --name 'IocManager')
    if [ "xpp-control"  == "$HOSTNAME" ]; then
	wmctrl -v -i -r "$window_id" -e 0,3310,1100,530,1000
    elif [ "xpp-daq" == "$HOSTNAME" ]; then
	wmctrl -v -i -r "$window_id" -e 0,3310,1100,530,1000
    fi
    wmctrl -v -i -r "$window_id" -b add,sticky
fi
