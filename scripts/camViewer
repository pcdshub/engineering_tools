#!/bin/bash

#
# find_pv: use find_pv to get to the sysreset PV of the IOC for rebooting.
# --> does not work. Need to know more. Maybe just use in case of gige, assuming naming convention.
#
# from EDM_LAUNCH: grep that cmd file for 'export IOC_PV'!!!
#
CAMPVFULL=""

name_to_pv()
{
if [ $# -lt 2 ]; then
    echo 'need a name as input to return camera basePV and hutch'
    exit
fi
CAMPVFULL=""
hutch=`echo $2 | tr A-Z a-z`
VIEWERCFG=/reg/g/pcds/pyps/config/$hutch/camviewer.cfg
# Match "-" or "_" or " ".
NAME=`echo $1 | sed -e 's/-/ /g' -e 's/_/ /g' -e 's/ /[-_ ]/g'`
#
# The story here: 
# See how many matches we have in the hutch.
# If 0, try looking in all of the hutches.
# If 1, then we're done.
# Otherwise:
# Look for a complete match, anchored on both sides.
# Look for a match anchored at the end.
# If there is more than one, return "ambiguous"
#
# Make a temp file with just the PVs and camera names that match.
tmp=/tmp/cv.$$
cat $VIEWERCFG | grep -i "$NAME" | grep -v '#' | awk -F, '{ if (split($2,a,";")==1) n=$2; else n=a[2]; gsub(" ","",n); gsub(" ","",$4); printf "%s %s\n", n, $4; }' >$tmp
c=`wc -l <$tmp`
if [ $c -eq 0 ]; then
    VIEWERCFG=/reg/g/pcds/pyps/config/*/camviewer.cfg
    cat $VIEWERCFG | grep -i "$NAME" | grep -v '#' | awk -F, '{ if (split($2,a,";")==1) n=$2; else n=a[2]; gsub(" ","",n); gsub(" ","",$4); printf "%s %s\n", n, $4; }' >$tmp
    c=`wc -l <$tmp`
    if [ $c -eq 0 ]; then
	echo "No match for $1"
	rm -f $tmp
	exit
    fi
fi
if [ $c -eq 1 ]; then
    CAMPVFULL=`awk '{print $1;}' <$tmp`
    rm -f $tmp
    return
fi
# OK, ambiguous.  Look for a complete match on the second word.
if [ `egrep -i " $NAME\$" < $tmp | wc -l` -eq 1 ]; then
    CAMPVFULL=`egrep -i " $NAME\$" < $tmp | awk '{print $1;}'`
    rm -f $tmp
    return
fi
# What about just a match at the end? (That is, if we are searching
# for "yag1", prefer "mec_yag1" to "mec_yag11".)
if [ `egrep -i "$NAME\$" < $tmp | wc -l` -eq 1 ]; then
    CAMPVFULL=`egrep -i "$NAME\$" < $tmp | awk '{print $1;}'`
    rm -f $tmp
    return
fi
echo '"'$1'" is ambiguous:'
awk '{print $2;}' <$tmp
rm -f $tmp
exit
}

gige_num_to_name()
{
if [ $# -lt 2 ]; then
    echo 'need two arguments: hutch & number'
fi
HUTCH=${1^^}
hutch=${1,,}
VIEWERCFG=/reg/g/pcds/pyps/config/$hutch/camviewer.cfg
printf -v GIGENUM "%02d" $2
GIGEBASE=$HUTCH:GIGE:$GIGENUM

echo `grep $GIGEBASE $VIEWERCFG | grep -v '#' | awk -F, '{print $4}'`
}

isNum(){
if [ $# -lt 1 ]; then
    return 2
fi

case $1 in
    ''|*[!0-9]*) return 1;;
    *) return 0;;
esac
}

list_cams()
{
if [ $# -lt 1 ]; then
    echo 'need one arguments: hutch '
fi
HUTCH=`echo $1 | tr a-z A-Z`
hutch=`echo $1 | tr A-Z a-z`

ALLVIEWERCFG=/reg/g/pcds/pyps/config/*/camviewer.cfg
echo cat $ALLVIEWERCFG | grep -v '#' | awk -F, '{ if (split($2,a,";")==1) n=$2; else n=a[2]; gsub(" ","",n); gsub(" ","",$4); printf "%s %s\n", n, $4; }' 

VIEWERCFGLFE=/reg/g/pcds/pyps/config/lfe/camviewer.cfg
VIEWERCFG=/reg/g/pcds/pyps/config/$hutch/camviewer.cfg
VIEWERCFGXRT=/reg/g/pcds/pyps/config/xrt/camviewer.cfg

for gige_cam in `grep -v '#' $VIEWERCFGLFE | awk -F, '{print $4 "\n" }'`; do
    echo $gige_cam
done

if  [ $hutch != 'tmo' ] && [ $hutch != 'rix' ]; then
    for gige_cam in `grep -v '#' $VIEWERCFGXRT | awk -F, '{print $4 "\n" }'`; do
	echo $gige_cam
    done
fi

for gige_cam in `grep -v '#' $VIEWERCFG | awk -F, '{print $4 "\n" }'`; do
    echo $gige_cam
done

}

usage()
{
cat << EOF
usage: $0 options

start the viewer for controls cameras

OPTIONS:
-c camera name as in camera list or gige #
-m bring up the edm screen
-r reboot the IOC
-l print list of cameras
-w # (wait for # hours to ask to renew, default 2 and 12 for GIGEs)
-u # update rate limit (default 5)
-H hutch: use a specific hutches camviewer config file
EOF
}

if [[ $1 =~ ^(h|-h|-help|--help) ]]; then
	usage
	exit 0
fi

hutch=`get_info --gethutch`
if [ $hutch = unknown_hutch ]; then
    echo 'unknown hutch, cannot use camViewer script'
    exit 1
fi

CAMNUM=0
WAIT=0
RATE=-1
MAINSCREEN=0

EXE=/reg/g/pcds/pyps/config/$hutch/camviewer/run_viewer.csh
PVLIST=/reg/g/pcds/pyps/config/$hutch/camviewer.cfg
CAMNUM=0
WAIT=0
RATE=-1
REBOOT=0

while getopts "c:w:u:H:lmr" OPTION
do
    case $OPTION in
	l)
	    list_cams $hutch
	    exit 1
	    ;;
	c)
	    CAM=$OPTARG
	    if isNum $CAM; then
		CAMNUM=$CAM
		CAMNAME=`gige_num_to_name $hutch $CAM`
	    else
		CAMNAME=$CAM
		CAMNUM=-1
	    fi
	    ;;
	w)
	    WAIT=$OPTARG
	    ;;	    
	u)
	    RATE=$OPTARG
	    ;;	    
	H)
	    hutch=$OPTARG
	    ;;
	m)
	    MAINSCREEN=1
	    ;;
	r)
	    REBOOT=1
	    ;;
	esac
done

if [ $CAMNUM -eq 0 ]; then
    if [ $hutch = "amo" ]; then
        CAMNAME='UNIQ:01'
    elif [ $hutch = "sxr" ]; then
	CAMNAME=P1
    elif [ $hutch = "xpp" ]; then
	CAMNAME=hx2_shared
    else
	CAMNAME=xcs_yag2
    fi
fi
    
export EPICS_CA_MAX_ARRAY_BYTES=24000000
echo working with camera of name: $CAMNAME

name_to_pv "$CAMNAME" $hutch

if [ $MAINSCREEN -gt 0 ]; then
    echo 'try to get the main screen for: ' $CAMNAME
    echo 'start the main screen for camera base PV: ' $CAMPVFULL
    cmdName=`caget -St $CAMPVFULL:LAUNCH_EDM`
    echo calling edm main screen from: $cmdName
    $cmdName
    exit
fi

if [ $REBOOT -gt 0 ]; then
    echo 'reboot IOC for camera: ' $CAMNAME
    edmcmdName=`caget -St $CAMPVFULL:LAUNCH_EDM`
    IOCPV=`grep 'export IOC_PV' $edmcmdName | awk '{print $2 "\n" }' | sed s/IOC_PV=/''/g`
    echo 'restart IOC last started on: ' `caget -t $IOCPV:STARTTOD`
    caput $IOCPV:SYSRESET 1
    exit
fi


IS_ACQUIRING=`caget -t -n $CAMPVFULL:Acquire_RBV`
if isNum $IS_ACQUIRING; then
    if [ $IS_ACQUIRING -eq 0 ]; then
	echo 'start acquiring for camera ' $CAMNAME
	caput -n $CAMPVFULL:Acquire 1
    fi
else
    echo 'cannot check Acquiring PV, try to open camera viewer anyways....'
fi

if [ $WAIT -gt 0 ]; then
    if [ $RATE -gt 0 ]; then
	echo $EXE --camerapv $CAMPVFULL --instrument $hutch --pvlist $PVLIST --idle $WAIT --rate $RATE&
	$EXE --camerapv $CAMPVFULL --instrument $hutch --pvlist $PVLIST --idle $WAIT --rate $RATE&
    else
	echo $EXE --camerapv $CAMPVFULL --instrument $hutch --pvlist $PVLIST --idle $WAIT&
	$EXE --camerapv $CAMPVFULL --instrument  $hutch --pvlist $PVLIST --idle $WAIT&
    fi
else
    if [ $RATE -gt 0 ]; then
	echo $EXE --camerapv $CAMPVFULL --instrument $hutch --pvlist $PVLIST --rate $RATE&
	$EXE --camerapv $CAMPVFULL --instrument  $hutch --pvlist $PVLIST --rate $RATE&
    else
	echo $EXE --camerapv $CAMPVFULL --instrument $hutch --pvlist $PVLIST &
	$EXE --camerapv $CAMPVFULL --instrument  $hutch --pvlist $PVLIST &
    fi
fi
