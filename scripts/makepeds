#! /bin/bash

DIR=$(readlink -f "$(dirname "${BASH_SOURCE[0]}")")
PATH=$DIR:$PATH

usage()
{
cat << EOF
usage: $0 options

Make a pedestal file for offline use

OPTIONS:
        -u|--user        
               user (needs to be able to log into the psananeh/feh)
        -p|--post <text>  
               add <text> to elog post
        -F|--ffb
                run job on FFB system
        -t|--test
                do not deploy pedestals (epix10k only)
        -r|--run         
               runnumber for pedestal
        -e|--experiment <expname> 
               in case you do not want pedestals for the ongoing experiment
        -O|--opal         
               make pedestals for Opals (default only cspad/EPIX detectors)
        -Z|--zyla         
               make pedestals for Zyla (default only cspad/EPIX detectors)
        -R|--Rayonix
               make pedestals for Rayonix (please note that this is not the correct procedure for this detector)
        -U|--uxi
               make pedestals for Uxi/Icarus detector
        -j|--jungfrau3     
               make pedestals for Jungfrau - 3 run version(default only cspad/EPIX detectors)
        -q|--queue <queue>
               queue for batch submisson
        -D|--xtcav_dark
                dark run for XTCAV
        -L|--xtcav_lasingoff
               lasing off run for XTCAV
        -v|--validity_start <val_run>
               validity range (set to <val_run>-end)
        -N|--nevents <#>  
                use this number of events (default 1000). Needed when using -c as original events are counted
        -c|--eventcode <evtcode x> 
                use events with eventcode <x> set
        -n|--noise_max <#> 
                if you have created a noise file, then write pixel mask file for pixels with noise above #sigmas
        -C|--noise_min <#> 
                if noise filecreated, write pixel mask file for pixels with noise below xxx (currently integer only)
        -m|--adu_min <#> 
                write pixel mask file for pixels with pedestal below xxx (currently integer only)
        -x|--adu_max <#>  
                write pixel mask file for pixels with pedestal above xxx )currently integer only)
        -i|--interactive 
                start calibman. -r 0: show all darks, -r n: show runs (n-25) - 25
        -d|--calibdir
                give path for alternative calibdir
        -b|--nbunch
                number of bunches for the laseroff XTCAV calculations
EOF
}


elogMessage="DARK"
POSITIONAL=()
while [[ $# -gt 0 ]]
do
        key="$1"
	case $key in
		-h|--help)x
			usage
			exit
			;;
		-p|--post)
		        ELOGTEXT="$2"
			shift
			shift
			;;
           	-D|--xtcav_dark)
                        POSITIONAL+=("$1")
	                elogMessage="DARK for XTCAV"
			shift
			;;
           	-L|--xtcav_lasingoff)
                        POSITIONAL+=" $1"
	                elogMessage="Lasing off for XTCAV"
			shift
			;;
           	-i|--interactive)
                        POSITIONAL+=("$1")
	                elogMessage="start calibman GUI"
			shift
			;;
           	-U|--uxi)
                        POSITIONAL+=("$1")
	                elogMessage="DARK for Uxi"
			shift
			;;
           	-Z|--zyla)
                        POSITIONAL+=("$1")
	                elogMessage="DARK for Zyla"
			shift
			;;
           	-O|--opal)
                        POSITIONAL+=("$1")
	                elogMessage="DARK for opal"
			shift
			;;
           	-R|--rayonix)
                        POSITIONAL+=("$1")
	                elogMessage="DARK for Rayonix"
			shift
			;;
           	-j|--jungfrau3)
                        POSITIONAL+=("$1")
	                elogMessage="DARK for jungfrau, also next two runs."
			shift
			;;
           	-u|--user)
		        USER="$2"
			shift
			shift
			;;
           	-r|--run)
		        RUN="$2"
                        POSITIONAL+=("--run $2")
			shift
			shift
			;;
           	-e|--experiment)
		        EXP="$2"
                        POSITIONAL+=("--experiment $2")
			shift
			shift
			;;
           	-F|--ffb)
		        FFB=1
			shift
			;;
           	-q|--queue)
		        QUEUE="$2"
                        POSITIONAL+=("--queue $2")
			shift
			shift
			;;
                 *)
                        POSITIONAL+=("$1")
			shift
			;;
	esac
done
set -- "${POSITIONAL[@]}"
	
ELOGTEXT=${ELOGTEXT:=""}
RUN=${RUN:=0}
EXP=${EXP:='xxx'}
FFB=${FFB:=0}
QUEUE=${QUEUE:='xxx'}
INTERACTIVE=${INTERACTIVE:=0}

FFBQUEUES=('anaq' 'ffbh1q' 'ffbl1q' 'ffbh2q' 'ffbl2q' 'ffbh3q' 'ffbl3q' 'ffbh4q' 'ffbl4q')
ANAQUEUES=('psanagpuq' 'psanaq' 'psfehq' 'psfehprioq' 'psfehhiprioq')
for FFBQUEUE in ${FFBQUEUES[@]}; do
    if [[ $QUEUE == $FFBQUEUE ]]; then 
	FFB=1
	break
    fi
done

for ANAQUEUE in ${ANAQUEUES[@]}; do
    if [[ $QUEUE == $ANAQUEUE ]]; then 
	FFB=0
	break
    fi
done

if [[ $RUN == 0 ]]; then
    if [[ $INTERACTIVE == 0 ]]; then
	printf "Please enter a run number: \n"; read RUN
        set -- "$@" '--run ' $RUN
    fi
fi

if [[ $EXP == 'xxx' ]]; then
    HUTCH=`get_info --gethutch`
    EXP=`get_info --exp --hutch $HUTCH`
    set -- "$@" '--experiment ' $EXP
else
    HUTCH=${EXP:0:3}
fi

if [[ $HOSTNAME =~ "psana" ]] || [[ $HOSTNAME =~ "drp-srcf" ]]; then
    #echo $DIR/makepeds_psana $@
    $DIR/makepeds_psana $@
else
    if [[ $USER =~ "opr" ]]; then
        printf "Please enter user name (cannot run as from operator account): \n"; read USER
    fi

    if [[ $FFB == 1 ]]; then
        echo calling on FFB system: makepeds_psana $@
	echo ssh -Y $USER@psffb "$DIR/makepeds_psana $@"
	ssh -Y $USER@psffb "$DIR/makepeds_psana $@"
    else
        echo calling on offline system: makepeds_psana $@
	echo ssh -Y $USER@psana "$DIR/makepeds_psana $@"
	ssh -Y $USER@psana "$DIR/makepeds_psana $@"
    fi
fi

source pcds_conda
elog_par_post --file pedestal -e "$EXP" -r $RUN

#if this is a default pedestal run, then do not post as this is handled in the pedestal scripts
if [[ $elogMessage == 'DARK' ]] && [[ $ELOGTXT == '' ]] ; then
    echo ---- Done processing pedestals for Run $RUN -----
    exit 0
fi

PYCMD=LogBookPost.py
echo -- Now posting special message to elog --
echo -- $elogMessage --

elogMessage+=$ELOGTEXT
if [[ `whoami` =~ "opr" ]]; then
    echo $BINPATH $PYCMD -i "${HUTCH^^}" -u `whoami` -e "$EXP"  -t DARK  -r $RUN -m "$elogMessage"
    if [[ $HOSTNAME == 'cxi-monitor' ]]; then
        $BINPATH $PYCMD -i "${HUTCH^^}" -u `whoami` -p pcds -e "$EXP"  -t DARK  -r $RUN -m "$elogMessage" -s 1&
    else
        $BINPATH $PYCMD -i "${HUTCH^^}" -u `whoami` -p pcds -e "$EXP"  -t DARK  -r $RUN -m "$elogMessage"&
    fi
    elog_par_post --file pedestal -e "$EXP" -r $RUN
else
    echo $BINPATH $PYCMD -i "${HUTCH^^}" -e "$EXP"  -t DARK -r $RUN -m "$elogMessage"
    if [[ $HOSTNAME == 'cxi-monitor' ]]; then
        $BINPATH $PYCMD -i "${HUTCH^^}" -e "$EXP" -t DARK -r $RUN -m "$elogMessage" -s 1&
    else
        $BINPATH $PYCMD -i "${HUTCH^^}" -e "$EXP" -t DARK -r $RUN -m "$elogMessage"&
    fi
fi
