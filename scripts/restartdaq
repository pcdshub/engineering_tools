#!/bin/bash

usage()
{
cat << EOF
usage: $0 options

OPTIONS:
-w sort windows after start
-d dss-test setup
-p select partition (same as used last)
-s silent (do not email jana)
-c enable core files
-C (LCLS2 DAQMGR Hutches ONLY!) Select a cnf to use.
-u UED .cnf file
EOF
}




NOTRUNNING='not running'
AIMHOST=$HOSTNAME
SELPART=''
DOWIN=''
#make it silent for now until done with testing and jana has been warned
SILENT=1

if [[ ($1 == "--help") || ($1 == "-h") ]]; then
	usage
	exit 0
fi

CORESIZE=0
while getopts "m:pwscdu:" OPTION
do
    case $OPTION in
	p)
	    SELPART='Select Partition'
	    ;;
	w)
	    DOWIN='Sort Windows'
	    ;;
	s)
	    SILENT=1
	    ;;
	m)
	    AIMHOST=$OPTARG
	    ;;
 	c)
 	    CORESIZE=2000000000
 	    ;;
	u)
            UED_CNF=$OPTARG
            ;;
 	d)
 	    DSSTEST=1
 	    ;;
	?)
	    usage
	    exit 1
	    ;;

	esac
done

if [[ $(whoami) != *'opr'* ]]; then
    echo "Please run the DAQ from the operator account!"
    exit
fi

# Check if the current's user hutch uses daqmgr. If so,
# use the python utilities to manage the daq.
checkdaqroute "$(basename "$0")" "$@"
case $? in
    1)
        # Not a daqmgr hutch — proceed with local fallback
        ;;
    2)
        echo "Error: Unable to determine DAQ manager status." >&2
        exit 2
        ;;
    *)
        # Handled by checkdaqroute or failed internally — already exited
        exit $?
        ;;
esac

HUTCH=$(get_info --gethutch)
CNFEXT=.cnf
CNFFILE="$HUTCH""$CNFEXT"
if [ "$HOSTNAME" == 'cxi-daq' ]; then
    PEXT=_0
    CNFFILE=$HUTCH$PEXT$CNFEXT
elif [ "$HOSTNAME" == 'cxi-monitor' ]; then
    PEXT=_1
    CNFFILE=$HUTCH$PEXT$CNFEXT
fi

if [[ "$DSSTEST" == 1 ]]; then
    CNFFILE=dss.cnf
fi

#clean the enviroment before sourcing any conda env.
unset PYTHONPATH
unset LD_LIBRARY_PATH

#go to hutches DAQ scripts directory (puts pid file in consistent location)
cd /reg/g/pcds/dist/pds/"$HUTCH"/scripts/ || exit

DAQNETWORK='fez'
LCLS2_HUTCHES="ued"
if echo "$LCLS2_HUTCHES" | grep -iw "$HUTCH" > /dev/null; then
    # shellcheck disable=SC1090
    source /reg/g/pcds/dist/pds/"$HUTCH"/scripts/setup_env.sh
    PROCMGR='procmgr'
else
    PROCMGR="/reg/g/pcds/dist/pds/$HUTCH/current/tools/procmgr/procmgr"
fi

# If UED machine; bypass drp node requirement, else; check for drp node
if [ "$HUTCH" == "ued" ]; then
    IS_DAQ_HOST=1
    CNFFILE=$UED_CNF
else
    IS_DAQ_HOST=$(netconfig search "$AIMHOST"-$DAQNETWORK --brief | grep -c $DAQNETWORK)
fi

if [ "$IS_DAQ_HOST" == 0 ]; then
    HOSTS=$(netconfig search "$HUTCH"-*-$DAQNETWORK --brief | sed s/-$DAQNETWORK//g)
    WORKINGHOSTS=''
    #make sure at least cds is up.
    for HOST in $HOSTS; do
	      if [[ $(ping -w 2 "$HOST" >/dev/null 2>&1) == 0 ]]; then
	    WORKINGHOSTS=$WORKINGHOSTS' '$HOST
	fi
    done
    echo "$AIMHOST" does not have "$DAQNETWORK", please choose one of the following machines to run the DAQ: "$WORKINGHOSTS"
    echo "restartdaq -m <machine_with_$DAQNETWORK>"
    exit
fi

if [[ $DSSTEST == 1 ]]; then
    DAQHOST=$(wheredaq -d)
else
    DAQHOST=$(wheredaq)
fi

PLATFORM=$(grep 'if not platform' /reg/g/pcds/dist/pds/"$HUTCH"/scripts/"$CNFFILE" | awk '{print $NF}' | sed s/\'//g)
if [[ "$DAQHOST" != *$NOTRUNNING* ]]; then
    echo stop the DAQ on "$DAQHOST" from "$HOSTNAME"
    T="$(date +%s%N)"
    $PROCMGR stop \
	/reg/g/pcds/dist/pds/"$HUTCH"/scripts/"$CNFFILE"


    if [ -f /reg/g/pcds/dist/pds/"$HUTCH"/scripts/p"$PLATFORM"$CNFEXT.running ]; then
	echo 'the DAQ did not stop properly, exit now and try again or call Silke or the DAQ phone'
	exit
    fi
    T2="$(($(date +%s%N)-T))"
    S="$((T2/1000000000))"
    M="$((T2/1000000))"
    echo 'it took '$S'.'$M' for stopping the DAQ'
else
    if [ -f /reg/g/pcds/dist/pds/"$HUTCH"/scripts/p"$PLATFORM"$CNFEXT.running ]; then
	echo while DAQ reports to not run, will stop the DAQ on "$DAQHOST" from "$HOSTNAME" to clear the p"$PLATFORM"$CNFEXT.running file
	T="$(date +%s%N)"
	$PROCMGR stop \
	    /reg/g/pcds/dist/pds/"$HUTCH"/scripts/"$CNFFILE"

        if [ -f /reg/g/pcds/dist/pds/"$HUTCH"/scripts/p"$PLATFORM"$CNFEXT.running ]; then
            echo 'the DAQ did not stop properly, exit now and try again follow the escalation procedure'
            exit
        fi
        echo DAQ is now stopped
    else
        echo DAQ is currently not running
    fi
fi


#start DAQ on AIMHOST
T="$(date +%s%N)"
echo start DAQ on "$AIMHOST"
if [ "$HOSTNAME" == "$AIMHOST" ]; then
    $PROCMGR start \
        /reg/g/pcds/dist/pds/"$HUTCH"/scripts/"$CNFFILE" -c $CORESIZE -o /reg/g/pcds/pds/"$HUTCH"/logfiles
else
    ssh -Y "$AIMHOST" restartdaq
fi

if [[ $DSSTEST == 1 ]]; then
    DAQHOST=$(wheredaq -d)
    echo 'checked dss-node test DAQ....'
    echo "$DAQHOST"
else
    DAQHOST=$(wheredaq)
fi

if [[ "$DAQHOST" == *$NOTRUNNING* ]]; then
    echo 'We tried restarting the DAQ, but wheredaq says its still off!'
    #I cannot remember what this statement was supposed to do.
    if [[ "$DAQHOST" != "$AIMHOST" ]]; then
	echo 'We tried to run the DAQ on another host: target '"$AIMHOST"' from '"$HOSTNAME"
    fi
    exit
else
    T2="$(($(date +%s%N)-T))"
    S="$((T2/1000000000))"
    M="$((T2/1000000))"
    echo 'and '$S'.'$M' for starting the DAQ'
fi

if [ ${#DOWIN} != 0 ] ||  [ ${#SELPART} != 0 ]; then
    if  [ "$HUTCH"  == 'xpp' ] || [ "$HUTCH"  == 'xcs' ]; then
	if  [ ! -f /usr/bin/xdotool ]; then
	    echo 'xdotool not installed, ask IT to do so'
	    DOWIN=0
	    SELPART=0
	fi
    fi
    if [ -f /reg/neh/operator/"$HUTCH"opr/bin/"$HUTCH"_cleanup_windows_daq ]; then
	if [ ${#DOWIN} != 0 ]; then
	    echo 'This instrument does not have standard locations for DAQ windows setup'
	fi
	DOWIN=0
    fi
fi

if [ ${#DOWIN} != 0 ]; then
    T="$(date +%s%N)"
    if [ "$HUTCH" == 'xpp' ]; then
        xdotool search --sync --onlyvisible --name 'ProcStat'
    fi
    if [ "$HUTCH" == 'xcs' ]; then
	sleep 2
    fi
    echo 'resorting the windows now using: /reg/neh/operator/'"$HUTCH"'opr/bin/'"$HUTCH"'_cleanup_windows_daq'
    /reg/neh/operator/"$HUTCH"opr/bin/"$HUTCH"_cleanup_windows_daq
    Tdinter="$(($(date +%s%N)-T))"
    Sinter="$((Tdinter/1000000000))"
    Minter="$((Tdinter/1000000))"
    echo 'and '"$Sinter"'.'"$Minter"' extra seconds for windows'
fi

if [ ${#SELPART} != 0 ]; then
    DAQC=$(xdotool search  --onlyvisible --name 'DAQ Control')
    #echo $DAQC
    xdotool mousemove --sync --window "$DAQC" 80 230
    xdotool windowfocus "$DAQC"
    xdotool click 1

    PARTSEL=$(xdotool search  --onlyvisible --sync --name 'Partition Selection')
    YLOW=$(xdotool search --name 'Partition Selection' getwindowgeometry %@ | grep Geometry | awk '{print $2}' | sed s/x/" "/g | awk '{print $2}')
        #echo $PARTSEL
    xdotool mousemove --sync --window "$PARTSEL" 80 $(("$YLOW"-28))
    xdotool click 1
fi

if [ "$SILENT" == 0 ];then
    /reg/g/pcds/dist/pds/scripts/txtjana.sh
    printf 'email jana that we restarted the DAQ\n'
fi

exit
