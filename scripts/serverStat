#! /bin/bash

names_from_name(){
    if [ $# -lt 1 ]; then
	echo 'need arguments: input IP'
    fi
    INNAME=$1
    if [[ $INNAME == *'-ipmi'* ]]; then
	INNAME=`echo $INNAME | sed s/-ipmi//g`
    elif [[ $INNAME == *'-fez'* ]]; then
	INNAME=`echo $INNAME | sed s/-fez//g`
    elif [[ $INNAME == *'-ana'* ]]; then
	INNAME=`echo $INNAME | sed s/-ana//g`
    fi
    CDSNAME=$INNAME
    CDSIP=`netconfig search $CDSNAME | grep IP: | awk {'print $2'}`
    if [[ `netconfig search $NAME-ipmi --brief | wc -w` -gt 0 ]]; then
	NAMEIPMI=$INNAME-ipmi
    fi
    if [[ `netconfig search $NAME-fez --brief | wc -w` -gt 0 ]]; then
	FEZNAME=$INNAME-fez
	FEZIP=`netconfig search $FEZNAME | grep IP: | awk {'print $2'}`
    fi
    if [[ `netconfig search $NAME-ana --brief | wc -w` -gt 0 ]]; then
	ANANAME=$INNAME-ana
    fi
}

isCam(){
    ISCAM=`grep $DEV /reg/g/pcds/pyps/config/*/camviewer.cfg | grep -v '#' | wc -l`
    if [ $ISCAM -gt 0 ]; then
	ISGIGE=`grep $DEV /reg/g/pcds/pyps/config/*/camviewer.cfg | grep -v '#' | grep GIGE | wc -l`
	if [ $ISGIGE -gt 0 ]; then
	    read -p 'This is a gige camera, start the maim edm screen? (y/n)'
	    if [ "$REPLY"=="y" ]; then
		gige -c $DEV -m 
	    else
		read -p 'Do you want to restart acqisition (y/n)'
		if [ "$REPLY"=="y" ]; then
		    gige -c $DEV -n
		else
		    read -p 'Do you want to reboot the IOC (y/n)'
		    if [ "$REPLY"=="y" ]; then
			gige -c $DEV -r
		    fi
		fi
	    fi
	    exit
	else
	    echo 'this is a non-gige camera, go to the IOC manager to reboot/check status'
	    exit
	fi
    fi
}

host_from_PV(){
    if [[ $NAME == *':'* ]]  && [[ $HUTCH == 'unknown_hutch' ]]; then
	echo 'Getting info for a host of a PV currently only works on the hutch networks'
	exit
    fi
    if [[ ${NAME:0:3} == ${HUTCH^^} ]]; then
        HOST=`cainfo $NAME | grep Host | awk {'print $2'} | awk 'BEGIN { FS = ":"}; {print $1}' | sed s/'.pcdsn'/''/g`
	if [[ $HOST == *'disconnected'* ]]; then
	    echo PV $NAME is disconnected
	    exit
	fi
	echo PV $NAME is hosted on server $HOST
	NAME=$HOST
	DEV=$HOST
    else
	echo 'Getting info for a host of a PV currently only works on the hutch network (e.g. for MFX:xxx from the mfx network)'
	exit
    fi
}

usage(){
cat << EOF
usage: $0 servername options

Script to check status of servers & reboot/power cycle them

SIGNATURE:
serverStat <servername> [command]

default command is 'status', list of commands:
status : print power status of machine, try to ping interfaces
on     : power machine on
off    : power machine off
cycle  : power cycle machine, wait a few second in off state
reset  : reset machine (ideally try that before power cycling)
console: open the ipmi console where possible
expert : display info and run checks on server

EOF
}

DIRTMP=`dirname  "${BASH_SOURCE[0]}"`
DIR="$( cd $DIRTMP && pwd -P )"
PATH=$PATH:$DIR

HUTCH=`get_hutch_name`
for name in "amo" "sxr" "xpp" "xcs" "mfx" "cxi" "mec" "det"; do
    if [[ $DEV == *$name* ]]; then
	HUTCH=$name
	break
    fi
done


HOST_HAS_FEZ=`netconfig search $HOSTNAME-fez --brief | wc -l`
let HOST_HAS_FEZ-=1

if [[ $# < 2 ]]; then
    if [[ $# < 1 ]]; then
	usage
	exit 1
        echo 'why here?'
    elif [[ $1 =~ ^(h|-h|-help|--help) ]]; then
	usage
	exit 0
        echo 'why here?'
    else
	CMD='status'
	DEV=$1
    fi
else
    if [[ $2 =~ ^(cycle|off|on|status|console|reset|expert) ]]; then
	DEV=$1
	CMD=$2
    else
	echo "serverStat: invalid option -- '$2'"
	echo "Try $0 --help for more information."
	exit 1
    fi
fi
NAME=$DEV
  
if [[ $NAME == *':'* ]]; then
    host_from_PV
fi

if [[ $NAME == *'172.21'* ]]; then
    ISSRV=1
    NAME=`netconfig search $NAME --brief | awk {'print $1'}`
    echo $DEV is an IP for $NAME
else
    ISSRV=`netconfig search $NAME | grep 'Found' | awk {'print $2'}`
fi
#exit

if [[ $NAME == *'-ipmi'* ]]; then
    NAMEIPMI=$NAME
    NAME=`echo $NAME | sed s/-ipmi//g`
    DEV=$NAME
elif [[ $NAME == *'-fez'* ]]; then
    NAME=`echo $NAME | sed s/-fez//g`
    DEV=$NAME
elif [[ $NAME == *'-ana'* ]]; then
    NAME=`echo $NAME | sed s/-ana//g`
fi

if  [[ $NAME == *rec* ]]; then
    if [[ $CMD == "off" ]] || [[ $CMD == "cycle" ]]; then
	printf "This is a recorder, better not to power cycle unless necessary, try to reset first. Quit? " "$NAME" "$CMD"; read ANSWER		
	if [[ $ANSWER == 'y' ]] || [[ $ANSWER == 'Y' ]] || [[ $ANSWER == 'yes' ]]; then  
	    printf 'quit now\n'
	    exit
	fi
    fi    
fi

#check if this is a DAQ device
if [[ $ISSRV -lt 1 ]] && [[ $HUTCH != 'unknown_hutch' ]]; then
    if [[  $DEV == *'event'* ]]; then
	DSSNODES=`grep dss_nodes /reg/g/pcds/dist/pds/${HUTCH}/scripts/${HUTCH}.cnf | grep -v '#' | head -n1`
	i=$((${#DEV}-1));NEV=`echo "${DEV:$i:1}"`;AWKNUM=$(($NEV+4))
	NAME=`echo $DSSNODES | awk -v temp=$AWKNUM {'print $temp'}  |  sed s/,// | sed s/_/-/g | sed s/\'//g | sed s/-fez//g`	
    else
	NDEV=`grep $DEV /reg/g/pcds/dist/pds/${HUTCH}/scripts/${HUTCH}.cnf | grep -v '#' | grep host | wc -l`
	if [ $NDEV -eq 1 ]; then
	    NAME=`grep $DEV /reg/g/pcds/dist/pds/${HUTCH}/scripts/${HUTCH}.cnf | grep -v '#' | grep host | awk {'print $1'} | sed s/{host://g | sed s/,// | sed s/_/-/g | sed s/\'//g | sed s/-fez//g`
	elif  [ $NDEV -eq 0 ]; then
	    #check if we have a camera, will exit if yes.
	    isCam
	    #was not a camera, will quit
	    echo 'no device of this name found, exit'
	    exit
	else
	    NAME=`grep "$DEV'" /reg/g/pcds/dist/pds/${HUTCH}/scripts/${HUTCH}.cnf | grep -v '#' | grep host | awk {'print $1'} | sed s/{host://g | sed s/,// | sed s/_/-/g`
	fi
    fi
    ISSRV=`netconfig search $NAME | grep 'Found' | awk {'print $2'}`
    if [[ $ISSRV -lt 1 ]]; then
	#after this is done, move head of first way ot getting NAME
	echo 'does not have ipmi, is not DAQ device.'
	exit
    fi

    SRVIP=`netconfig search $NAME | grep IP: | awk {'print $2'}`
    #ips_from_ip $SRVIP
    echo 'server for ' $DEV ' is: ' $NAME 
else
    SRVIP=`netconfig search $DEV | grep IP: | awk {'print $2'}`
    #ips_from_ip $SRVIP
fi


names_from_name $NAME

if [[ $CMD == "off" ]]; then
    psipmi $NAMEIPMI power off
elif [[ $CMD == "on" ]]; then
    psipmi $NAMEIPMI power on
elif [[ $CMD == "cycle" ]]; then
    psipmi $NAMEIPMI power cycle
elif [[ $CMD == "console" ]]; then
    echo "To exit console use ~."
    # Deactivate if it is activated:
    psipmi $NAMEIPMI sol deactivate &> /dev/null
    # Call console
    xterm -hold -bg black -fg white -T $NAME -e psipmi $NAMEIPMI sol activate &
elif [[ $CMD == "reset" ]]; then
    psipmi $NAMEIPMI power reset
elif [[ $CMD == "expert" ]]; then
    echo "Host netconfig entry:"
    echo -e "-------------------------------------------------"
    netconfig view $NAME
    echo -e ""
    echo -e "Checking IPMI power status:"
    echo -e "-------------------------------------------------"
    psipmi $NAMEIPMI power status
    echo -e ""
    echo -e "Checking host/ipmi/fez network interfaces are online:"
    echo -e "-------------------------------------------------"
    ping -w 2 $NAME >/dev/null 2>&1
    if [[ $? == 0 ]]; then
       echo "$NAME pings."
       CDS_ONLINE=1
    else 
       echo "$NAME does not ping."
       CDS_ONLINE=0
    fi
    ping -w 2 $NAME-ipmi >/dev/null 2>&1
    if [[ $? == 0 ]]; then
       echo "$NAME-ipmi pings."
    else 
       echo "$NAME-ipmi does not ping."
    fi
    ping -w 2 $NAME-fez >/dev/null 2>&1
    if [[ $? == 0 ]]; then
       echo "$NAME-fez pings."
    else 
       echo "$NAME-fez does not ping."
    fi
    echo -e " "
    if [[ $CDS_ONLINE == 1 ]]; then
	ssh -qT $NAME <<EOF
	    source /reg/g/pcds/setup/pcds_shortcuts.sh
	    export PATH=\$PATH:/sbin/:/usr/sbin
	    echo -e "Red Hat Version:"
	    echo -e "-------------------------------------------------"
	    uname -r | cut -d '.' -f 6
	    echo -e ""
	    echo -e "SLAC PCI Hardware:"
	    echo -e "-------------------------------------------------"
	    lspci | grep SLAC
	    echo -e ""
	    echo -e "Network PCI Hardware:"
	    echo -e "-------------------------------------------------"
	    lspci | grep Ethernet
	    echo -e ""
	    echo -e "Leutron PCI Hardware:"
	    echo -e "-------------------------------------------------"
	    echo -e ""
	    if [[ -e /opt/EDTpdv/pciload ]]; then
	       echo -e "EDT Cards:"
	       echo -e "-------------------------------------------------"
	       /opt/EDTpdv/pciload
	    fi
	    echo -e ""
	    echo -e "IOC Processes:"
	    echo -e "-------------------------------------------------"
	    show_epics_sioc
EOF
    else
	echo "$NAME is offline.  Skipping internal checks."
	echo -e "-------------------------------------------------"
    fi
    echo -e ""
    echo -e "PCDS Drivers:"
    IOCSTARTUP=/reg/g/pcds/dist/pds/boot/$NAME
    if [[ -e $IOCSTARTUP ]]; then
	echo $IOCSTARTUP
	echo -e "-------------------------------------------------"
	cat $IOCSTARTUP
    fi
    DAQSTARTUP=/reg/d/iocCommon/hosts/$NAME/startup.cmd
    if [[ -e $DAQSTARTUP ]]; then
	echo -e "-------------------------------------------------"
	cat $DAQSTARTUP
    fi
else
    ISON=`psipmi $NAMEIPMI power status | awk 'NF>=2 {print $(NF)}'`
    if [[ $ISON == *off* ]]; then
	echo $DEV is powered off
	exit
    elif [[ $ISON == *on* ]]; then
	echo $DEV is powered on
    else
	echo Cannot connect to $NAMEIPMI
    fi

    PNG=`ping -c 1 $SRVIP | grep transmitted | awk '{print $4}'`
    IFUP=0
    if [ $FEZNAME ]; then
	if [[ $HOST_HAS_FEZ -ge 1 ]]; then
	    PNGFEZ=`ping -c 1 $FEZNAME | grep transmitted | awk '{print $4}'`
	    echo $NAME ' is a server with IP: ' $CDSIP ' (ping: ' $PNG '), ' $FEZIP ' (ping' $PNGFEZ ')'
	    if [[ $(($PNG+$PNGFEZ)) -gt 1 ]]; then
		echo 'cds&fez interfaces are up'
	    fi
	else
	    echo $NAME ' is a server with IP: ' $CDSIP ' (ping: ' $PNG '), ' $FEZIP ' (cannot ping from machine without fez )'
	    if [ $PNG -gt 0 ]; then
		echo 'cds interface is up'
	    fi	    
	fi
    else
	echo $DEV ' is a server with IP: ' $CDSIP ' (ping: ' $PNG ')'
	if [ $PNG -gt 0 ]; then
	    echo 'cds interface is up'
	fi
    fi
fi
